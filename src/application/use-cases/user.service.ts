import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';
import * as bcrypt from 'bcryptjs';
import { User } from '../../domain/entities/user.entity';
import { IUserRepository } from '../../domain/repositories/user.repository.interface';
import { CreateUserDto, UpdateUserDto } from '../dto/user.dto';

@Injectable()
export class UserService {
  constructor(private readonly userRepository: IUserRepository) {}

  async createUser(createUserDto: CreateUserDto): Promise<User> {
    // Check if user already exists
    const existingUserByEmail = await this.userRepository.existsByEmail(createUserDto.email);
    if (existingUserByEmail) {
      throw new ConflictException('User with this email already exists');
    }

    const existingUserByPhone = await this.userRepository.existsByPhone(createUserDto.phone);
    if (existingUserByPhone) {
      throw new ConflictException('User with this phone number already exists');
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(createUserDto.password, 12);

    // Create user
    const newUser = new User(
      '', // ID will be generated by repository
      createUserDto.name,
      createUserDto.email,
      createUserDto.phone,
      hashedPassword,
      createUserDto.avatar,
      [],
      'user', // Default role for new users
      true,
      new Date(),
      new Date(),
    );

    return await this.userRepository.create(newUser);
  }

  async validateUser(email: string, password: string): Promise<User | null> {
    const user = await this.userRepository.findByEmail(email);
    if (!user) {
      return null;
    }

    const isPasswordValid = await bcrypt.compare(password, user.password || '');
    if (!isPasswordValid) {
      return null;
    }

    return user;
  }

  async findUserById(id: string): Promise<User> {
    const user = await this.userRepository.findById(id);
    if (!user) {
      throw new NotFoundException('User not found');
    }
    return user;
  }

  async findUserByEmail(email: string): Promise<User | null> {
    return await this.userRepository.findByEmail(email);
  }

  async updateUser(id: string, updateUserDto: UpdateUserDto): Promise<User> {
    const existingUser = await this.userRepository.findById(id);
    if (!existingUser) {
      throw new NotFoundException('User not found');
    }

    // Check if phone is being updated and is unique
    if (updateUserDto.phone && updateUserDto.phone !== existingUser.phone) {
      const existingUserByPhone = await this.userRepository.existsByPhone(updateUserDto.phone);
      if (existingUserByPhone) {
        throw new ConflictException('Phone number already in use');
      }
    }

    return await this.userRepository.update(id, updateUserDto);
  }

  async deleteUser(id: string): Promise<void> {
    const existingUser = await this.userRepository.findById(id);
    if (!existingUser) {
      throw new NotFoundException('User not found');
    }

    await this.userRepository.delete(id);
  }

  async getAllUsers(page: number = 1, limit: number = 10): Promise<{ users: User[], total: number, page: number, totalPages: number }> {
    const { users, total } = await this.userRepository.findAll(page, limit);
    const totalPages = Math.ceil(total / limit);

    return {
      users,
      total,
      page,
      totalPages,
    };
  }
}